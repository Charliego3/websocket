// Code generated by "enumer -type Status -text -values -trimprefix Status -output status_string.go"; DO NOT EDIT.

package websocket

import (
	"fmt"
	"strings"
)

const _StatusName = "DisconnectedConnectingDisconnectingEstablishInactiveConnectedReConnecting"

var _StatusIndex = [...]uint8{0, 12, 22, 35, 44, 52, 61, 73}

const _StatusLowerName = "disconnectedconnectingdisconnectingestablishinactiveconnectedreconnecting"

func (i Status) String() string {
	if i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

func (Status) Values() []string {
	return StatusStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[StatusDisconnected-(0)]
	_ = x[StatusConnecting-(1)]
	_ = x[StatusDisconnecting-(2)]
	_ = x[StatusEstablish-(3)]
	_ = x[StatusInactive-(4)]
	_ = x[StatusConnected-(5)]
	_ = x[StatusReConnecting-(6)]
}

var _StatusValues = []Status{StatusDisconnected, StatusConnecting, StatusDisconnecting, StatusEstablish, StatusInactive, StatusConnected, StatusReConnecting}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:12]:       StatusDisconnected,
	_StatusLowerName[0:12]:  StatusDisconnected,
	_StatusName[12:22]:      StatusConnecting,
	_StatusLowerName[12:22]: StatusConnecting,
	_StatusName[22:35]:      StatusDisconnecting,
	_StatusLowerName[22:35]: StatusDisconnecting,
	_StatusName[35:44]:      StatusEstablish,
	_StatusLowerName[35:44]: StatusEstablish,
	_StatusName[44:52]:      StatusInactive,
	_StatusLowerName[44:52]: StatusInactive,
	_StatusName[52:61]:      StatusConnected,
	_StatusLowerName[52:61]: StatusConnected,
	_StatusName[61:73]:      StatusReConnecting,
	_StatusLowerName[61:73]: StatusReConnecting,
}

var _StatusNames = []string{
	_StatusName[0:12],
	_StatusName[12:22],
	_StatusName[22:35],
	_StatusName[35:44],
	_StatusName[44:52],
	_StatusName[52:61],
	_StatusName[61:73],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Status
func (i Status) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Status
func (i *Status) UnmarshalText(text []byte) error {
	var err error
	*i, err = StatusString(string(text))
	return err
}
