// Code generated by "enumer -type MessageType -text -values -json -trimprefix Message -output type_string.go"; DO NOT EDIT.

package websocket

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MessageTypeName = "TextBinaryClosePingPong"

var _MessageTypeIndex = [...]uint8{0, 4, 10, 15, 19, 23}

const _MessageTypeLowerName = "textbinaryclosepingpong"

func (i MessageType) String() string {
	i -= 1
	if i < 0 || i >= MessageType(len(_MessageTypeIndex)-1) {
		return fmt.Sprintf("MessageType(%d)", i+1)
	}
	return _MessageTypeName[_MessageTypeIndex[i]:_MessageTypeIndex[i+1]]
}

func (MessageType) Values() []string {
	return MessageTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MessageTypeNoOp() {
	var x [1]struct{}
	_ = x[MessageText-(1)]
	_ = x[MessageBinary-(2)]
	_ = x[MessageClose-(3)]
	_ = x[MessagePing-(4)]
	_ = x[MessagePong-(5)]
}

var _MessageTypeValues = []MessageType{MessageText, MessageBinary, MessageClose, MessagePing, MessagePong}

var _MessageTypeNameToValueMap = map[string]MessageType{
	_MessageTypeName[0:4]:        MessageText,
	_MessageTypeLowerName[0:4]:   MessageText,
	_MessageTypeName[4:10]:       MessageBinary,
	_MessageTypeLowerName[4:10]:  MessageBinary,
	_MessageTypeName[10:15]:      MessageClose,
	_MessageTypeLowerName[10:15]: MessageClose,
	_MessageTypeName[15:19]:      MessagePing,
	_MessageTypeLowerName[15:19]: MessagePing,
	_MessageTypeName[19:23]:      MessagePong,
	_MessageTypeLowerName[19:23]: MessagePong,
}

var _MessageTypeNames = []string{
	_MessageTypeName[0:4],
	_MessageTypeName[4:10],
	_MessageTypeName[10:15],
	_MessageTypeName[15:19],
	_MessageTypeName[19:23],
}

// MessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageTypeString(s string) (MessageType, error) {
	if val, ok := _MessageTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MessageTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageType values", s)
}

// MessageTypeValues returns all values of the enum
func MessageTypeValues() []MessageType {
	return _MessageTypeValues
}

// MessageTypeStrings returns a slice of all String values of the enum
func MessageTypeStrings() []string {
	strs := make([]string, len(_MessageTypeNames))
	copy(strs, _MessageTypeNames)
	return strs
}

// IsAMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageType) IsAMessageType() bool {
	for _, v := range _MessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MessageType
func (i MessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MessageType
func (i *MessageType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessageType should be a string, got %s", data)
	}

	var err error
	*i, err = MessageTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MessageType
func (i MessageType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MessageType
func (i *MessageType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MessageTypeString(string(text))
	return err
}
