// Code generated by "enumer -type FrameType -text -values -json -trimprefix FrameType -output type_string.go"; DO NOT EDIT.

package websocket

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FrameTypeName = "TextBinary"

var _FrameTypeIndex = [...]uint8{0, 4, 10}

const _FrameTypeLowerName = "textbinary"

func (i FrameType) String() string {
	i -= 1
	if i < 0 || i >= FrameType(len(_FrameTypeIndex)-1) {
		return fmt.Sprintf("FrameType(%d)", i+1)
	}
	return _FrameTypeName[_FrameTypeIndex[i]:_FrameTypeIndex[i+1]]
}

func (FrameType) Values() []string {
	return FrameTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FrameTypeNoOp() {
	var x [1]struct{}
	_ = x[FrameTypeText-(1)]
	_ = x[FrameTypeBinary-(2)]
}

var _FrameTypeValues = []FrameType{FrameTypeText, FrameTypeBinary}

var _FrameTypeNameToValueMap = map[string]FrameType{
	_FrameTypeName[0:4]:       FrameTypeText,
	_FrameTypeLowerName[0:4]:  FrameTypeText,
	_FrameTypeName[4:10]:      FrameTypeBinary,
	_FrameTypeLowerName[4:10]: FrameTypeBinary,
}

var _FrameTypeNames = []string{
	_FrameTypeName[0:4],
	_FrameTypeName[4:10],
}

// FrameTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FrameTypeString(s string) (FrameType, error) {
	if val, ok := _FrameTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FrameTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FrameType values", s)
}

// FrameTypeValues returns all values of the enum
func FrameTypeValues() []FrameType {
	return _FrameTypeValues
}

// FrameTypeStrings returns a slice of all String values of the enum
func FrameTypeStrings() []string {
	strs := make([]string, len(_FrameTypeNames))
	copy(strs, _FrameTypeNames)
	return strs
}

// IsAFrameType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FrameType) IsAFrameType() bool {
	for _, v := range _FrameTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FrameType
func (i FrameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FrameType
func (i *FrameType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FrameType should be a string, got %s", data)
	}

	var err error
	*i, err = FrameTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FrameType
func (i FrameType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FrameType
func (i *FrameType) UnmarshalText(text []byte) error {
	var err error
	*i, err = FrameTypeString(string(text))
	return err
}
